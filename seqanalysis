# Tools for NGS datafiles.

from collections import Counter

def fastq2tup (fastqfilename):
    """Opens a fastq file and reads it in as a tuple, input the path and file name"""
    seqfile = open(fastqfilename)
    seqdatastr = seqfile.read()
    seqdatatup = tuple(map(str, seqdatastr.split('\n')))
    return (seqdatatup)

def genlistseq (seqdatatup):
    """Extracts a list of sequences from a sequence data tuple"""
    sequences = []
    for i,e in enumerate(seqdatatup):
        if i%4 == 1:
            sequences.append(e)
    return (sequences)

def seqdatatup2tsv (seqdatatup):
    """Converts the fastq tuple to a text string that can be read as a .tsv"""
    fastqtsv = "Run title\tSequence\tFlag\tQuality code"
    for i,e in enumerate(seqdatatup):
        if i % 4 == 0:
            fastqtsv += "\n"
            fastqtsv += e
        if i % 4 != 0:
            fastqtsv += "\t"
            fastqtsv += e
    return (fastqtsv)


def countseqfreqtup (seqdatatup, c):
    """Returns all sequences from the fastq tuple with frequency >= n as a tuple of (seqeunce,frequency) pairs"""
    seqlist = genlistseq (seqdatatup)
    seqcount = Counter(seqlist)
    sortedseqcount = seqcount.most_common()
    seqfreqlist = ()
    for e,n in sortedseqcount:
        if n >= c:
            seqfreqlist += (e,n)
    return seqfreqlist

def countseqfreq (seqlist, c):
    """Returns all sequences from a list of sequences with frequency >= n as a tuple of (seqeunce,frequency) pairs"""
    seqcount = Counter(seqlist)
    sortedseqcount = seqcount.most_common()
    seqfreqlist = ()
    for e,n in sortedseqcount:
        if n >= c:
            seqfreqlist += (e,n)
    return seqfreqlist

def revseq(s):
    """Reverses a seqeunce"""
    revs = ""
    for i in s:
        revs = i + revs
    return revs

def gencomp(s):
    """Generates the complementary sequence to a sequence"""
    comps = ""
    for base in s:
        if base == "G":
            comps += "C"
        if base == "C":
            comps += "G"
        if base == "A":
            comps += "T"
        if base == "T":
            comps += "A"
    return comps


def revseqlist (seqlist):
    """Generates the reversed sequences for a list of sequences and returns as a list"""
    revseqlist = []
    for seq in seqlist:
        reverse = revseq(seq)
        revseqlist.append(reverse)
    return revseqlist

def compseqlist (seqlist):
    """Generates the complementary sequences for a list of sequences and returns as a list"""
    compseqlist = []
    for seq in seqlist:
        comp = gencomp(seq)
        compseqlist.append(comp)
    return compseqlist

#The fastq file and path
seqfilename = r"H:\Desktop\CLAS-SELECTION_R2_001.fastq"
seqdatatup = fastq2tup(seqfilename)
seqlist = genlistseq (seqdatatup)
rseqlist = revseqlist (seqlist)
rcseqlist = compseqlist(rseqlist)
print ("Total sequence count =",len (seqlist), "\n") countedsequences = countseqfreq (seqlist,100) countedsequencescsv = ("Sequence,Count\n")

for i,e in enumerate(countedsequences):
    countedsequencescsv += str(e)
    if i % 2 == 0:
        countedsequencescsv += ","
    else:
        countedsequencescsv += "\n"

print (countedsequencescsv)

fullseqlist = seqlist
l75seqs = []
for seq in fullseqlist:
    if len (seq) == 75:
        l75seqs.append(seq)


l75seqsR2 = []
for seq in l75seqs:
    l75seqsR2.append(seq[32:40])

seqcountR2 = Counter(l75seqsR2)

print ("R2 sequences")

print ("Total sequence count =",len (l75seqsR2))

sortedseqcountR2 = seqcountR2.most_common()
seqfreqlistR2 = ()
for e,n in sortedseqcountR2:
    seqfreqlistR2 += (e,n)

countedsequencescsvR2 = ("Sequence,Count\n") for i,e in enumerate(seqfreqlistR2):
    countedsequencescsvR2 += str(e)
    if i % 2 == 0:
        countedsequencescsvR2 += ","
    else:
        countedsequencescsvR2 += "\n"

print (countedsequencescsvR2)

l75seqsR1 = []
for seq in l75seqs:
    l75seqsR1.append(seq[44:52])

seqcountR1 = Counter(l75seqsR1)

print ("R1 sequences")

print ("Total sequence count =",len (l75seqsR1))

sortedseqcountR1 = seqcountR1.most_common()
seqfreqlistR1 = ()
for e,n in sortedseqcountR1:
    seqfreqlistR1 += (e,n)

countedsequencescsvR1 = ("Sequence,Count\n") for i,e in enumerate(seqfreqlistR1):
    countedsequencescsvR1 += str(e)
    if i % 2 == 0:
        countedsequencescsvR1 += ","
    else:
        countedsequencescsvR1 += "\n"

print (countedsequencescsvR1)

codon1s = ["ACTCTGGA", "GGTGTTAC", "AGTGTCGT", "GCTCTAAG", "CATCGTGA", "AATCGGTC", "ACTGGCTA"]

print ("Codon 1 counts")
for codon in codon1s:
    codoncount = sum(codon in sequence for sequence in seqlist)
    print (codon,",",codoncount)

codon2s = ["CTTAGAGC", "GATCGACT", "TCTGGAAC", "ATTGACCG", "TGTCACGA", "GCTAACTG", "GCGTACAT"]

print ("Codon 2 counts")
for codon in codon2s:
    codoncount = sum(codon in sequence for sequence in seqlist)
    print (codon,",",codoncount)

